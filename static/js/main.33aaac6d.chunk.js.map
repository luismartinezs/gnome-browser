{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","faSearch","faCaretDown","faCaretUp","faTimes","json","require","professionsArr","Array","from","professionsSet","Set","forEach","e","professions","p","listProfessions","map","prof","trim","initialGnomes","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","professionsFilter","professionsBorderToggler","state","gnomeNum","upBtnStyle","showMoreBtn","gnomes","toConsumableArray","searchInput","minAgeInput","maxAgeInput","showMoreGnomes","bind","assertThisInitialized","scrollToTop","handleScroll","filterGnomesByName","resetGnomes","toggleProfessionFilter","filterGnomesAdvancedSearch","handleNameChange","handleMinAgeChange","handleMaxAgeChange","shuffleGnomes","handleProfClick","toggleMoreBtn","length","setState","window","addEventListener","removeEventListener","pageYOffset","document","body","scrollTop","documentElement","str","filteredGnomes","filter","gnome","name","toLowerCase","includes","has","delete","filterProfessions","filteredGnomesByProfession","size","i","concat","push","filteredGnomesByAge","orderedAgeRange","sort","a","b","age","advFilteredGnomes","target","value","shuffledGnomes","m","_ref","Math","floor","random","_this2","moreBtnStyle","react_default","createElement","App_SearchArea","filterGnomes","App_SupriseBtn","App_List","className","id","onClick","style","display","react_fontawesome_index_es","icon","React","Component","SearchArea","_this3","showAdvSearch","showBasicSearchBtn","toggleAdvSearch","App_BasicSearch","props","App_AdvSearchToggler","BasicSearch","_this4","basicSearchBtnStyle","type","onChange","AdvSearchToggler","caret","App_AdvSearch","basicSearchInput","AdvSearch","_this5","key","replace","border","max","min","SupriseBtn","List","gnomeArr","num","arr","App_ListItem","gnomeList","ListItem","_this6","showModal","handleOpenModal","handleCloseModal","src","thumbnail","alt","split","lib_default","isOpen","contentLabel","onRequestClose","overlayClassName","ariaHideApp","App_Detail","Detail","App_Profile","Profile","slice","weight","toFixed","height","backgroundColor","hair_color","App_FriendsList","gnomeFriends","friends","FriendsList","friendItems","friend","App_FriendItem","FriendItem","_this7","find","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvoYAMAA,IAAQC,IAAIC,IAAUC,IAAaC,IAAWC,KAE9C,IAAIC,EAAOC,EAAQ,IACfC,EAAiBC,MAAMC,KA0rB3B,SAAyBJ,GAErB,IAAIK,EAAiB,IAAIC,IAIzB,OAFAN,EAAI,YAAgBO,QAAQ,SAAAC,GAAO,OAAOA,EAAEC,YAAYF,QAAQ,SAAAG,GAAC,OAAIL,EAAeV,IAAIe,OAEjFL,EAhsBqBM,CAAgBX,IAChDE,EAAiBA,EAAeU,IAAI,SAACC,GAAD,OAAUA,EAAKC,SACnD,IAAMC,EAAgBf,EAAI,YAiBpBgB,cACF,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OACA,IAAMI,EAAoB,IAAIlB,IACxBmB,EAA2B,GAHvB,OAIVvB,EAAeK,QAAQ,SAACM,GAAD,OAAUY,EAAyBZ,IAAQ,IAClEI,EAAKS,MAAQ,CACTC,SAAU,GACVC,WAAY,OACZC,aAAa,EACbC,OAAOZ,OAAAa,EAAA,EAAAb,CAAKH,GACZS,kBAAmBA,EACnBQ,YAAa,GACbC,YAAa,EACbC,YAAa,IACbT,yBAA0BA,GAG9BR,EAAKkB,eAAiBlB,EAAKkB,eAAeC,KAApBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACtBA,EAAKqB,YAAcrB,EAAKqB,YAAYF,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACnBA,EAAKsB,aAAetB,EAAKsB,aAAaH,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACpBA,EAAKuB,mBAAqBvB,EAAKuB,mBAAmBJ,KAAxBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC1BA,EAAKwB,YAAcxB,EAAKwB,YAAYL,KAAjBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACnBA,EAAKyB,uBAAyBzB,EAAKyB,uBAAuBN,KAA5BlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC9BA,EAAK0B,2BAA6B1B,EAAK0B,2BAA2BP,KAAhClB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAClCA,EAAK2B,iBAAmB3B,EAAK2B,iBAAiBR,KAAtBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACxBA,EAAK4B,mBAAqB5B,EAAK4B,mBAAmBT,KAAxBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC1BA,EAAK6B,mBAAqB7B,EAAK6B,mBAAmBV,KAAxBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KAC1BA,EAAK8B,cAAgB9B,EAAK8B,cAAcX,KAAnBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACrBA,EAAK+B,gBAAkB/B,EAAK+B,gBAAgBZ,KAArBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KACvBA,EAAKgC,cAAgBhC,EAAKgC,cAAcb,KAAnBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAD,KA7BXA,gFAsCLG,KAAKM,MAAMC,UAAYP,KAAKM,MAAMI,OAAOoB,QAC1C9B,KAAK+B,SAAS,CACVtB,aAAcT,KAAKM,MAAMG,0DAOjCuB,OAAOC,iBAAiB,SAAUjC,KAAKmB,6DAIvCa,OAAOE,oBAAoB,SAAUlC,KAAKmB,qDAKtCa,OAAOG,YAAc,IACrBnC,KAAK+B,SAAS,CACVvB,WAAY,YAGhBR,KAAK+B,SAAS,CACVvB,WAAY,kDAUpBR,KAAK+B,SACD,CACIxB,SAAUP,KAAKM,MAAMC,SAAW,IACjCP,KAAK6B,uDAKZO,SAASC,KAAKC,UAAY,EAC1BF,SAASG,gBAAgBD,UAAY,6CAQtBE,GACf,IAAIC,EAAiB,GAGjBA,EADQ,KAARD,EACiB7C,EAEAA,EAAc+C,OAAO,SAACC,GAAD,OAAWA,EAAMC,KAAKC,cAAcC,SAASN,EAAI9C,OAAOmD,iBAGlG7C,KAAK+B,SACD,CACIrB,OAAQ+B,EACRlC,SAAU,IACXP,KAAK6B,uDASZ7B,KAAK+B,SACD,CACIrB,OAAOZ,OAAAa,EAAA,EAAAb,CAAKH,GACZY,SAAU,GACVK,YAAa,GACbR,kBAAmB,IAAIlB,IACvB2B,YAAa,EACbC,YAAa,IACbT,yBAA0B,IAC3BL,KAAK6B,gEAWOpC,GACfO,KAAKM,MAAMF,kBAAkB2C,IAAItD,GACjCO,KAAKM,MAAMF,kBAAkB4C,OAAOvD,GAEpCO,KAAKM,MAAMF,kBAAkB7B,IAAIkB,wDAcrC,IAAI+C,EAAMxC,KAAKM,MAAMM,YACjB6B,EAAiB,GAGjBA,EADQ,KAARD,EACiB7C,EAEAA,EAAc+C,OAAO,SAACC,GAAD,OAAWA,EAAMC,KAAKC,cAAcC,SAASN,EAAI9C,OAAOmD,iBAIlG,IAAII,EAAoBlE,MAAMC,KAAKgB,KAAKM,MAAMF,mBAC1C8C,EAA6B,GAEjC,GAAIlD,KAAKM,MAAMF,kBAAkB+C,KAAO,EAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAeX,OAAQsB,IAEnCX,EAAeW,GAAG/D,YAAYyC,OAASmB,EAAkBnB,OAAS,IAAI5C,IAAIuD,EAAeW,GAAG/D,YAAYgE,OAAOJ,IAAoBE,MAEnID,EAA2BI,KAAKb,EAAeW,SAOvDF,EAA6BT,EASjC,IALA,IAAIc,EAAsB,GAGtBC,EAAkB,IAFRxD,KAAKM,MAAMO,aAAe,MAC1Bb,KAAKM,MAAMQ,aAAe,MACC2C,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAEnDP,EAAI,EAAGA,EAAIF,EAA2BpB,OAAQsB,IAE/CI,EAAgB,GAAKN,EAA2BE,GAAGQ,KAAOJ,EAAgB,GAAKN,EAA2BE,GAAGQ,KAIjHL,EAAoBD,KAAKJ,EAA2BE,IAIxD,IAAIS,EAAoBN,EAExBvD,KAAK+B,SACD,CACIrB,OAAQmD,EACRtD,SAAU,IACXP,KAAK6B,0DAICzC,GACbY,KAAK+B,SACD,CACInB,YAAaxB,EAAE0E,OAAOC,mDAKf3E,GACfY,KAAK+B,SAID,CACIlB,YAAazB,EAAE0E,OAAOC,mDAKf3E,GACfY,KAAK+B,SACD,CACIjB,YAAa1B,EAAE0E,OAAOC,gDAe9B,IAJA,IAEIX,EAFAY,EAAclE,OAAAa,EAAA,EAAAb,CAAOH,GACrBsE,EAAID,EAAelC,OAGhBmC,GAAG,KAAAC,EAIoC,CAACF,EAF3CZ,EAAIe,KAAKC,MAAMD,KAAKE,SAAWJ,MAE+BD,EAAeC,IAA3ED,EAAeC,GAJXC,EAAA,GAIeF,EAAeZ,GAJ9Bc,EAAA,GAQVlE,KAAK+B,SACD,CACIrB,OAAQsD,EACRzD,SAAU,IACXP,KAAK6B,yDAQApC,GAAM,IAAA6E,EAAAtE,KAClBA,KAAKsB,uBAAuB7B,GAC5BO,KAAK+B,SACD,SAACzB,GACG,OAAQA,EAAMD,yBAAyBZ,IAAS6E,EAAKhE,MAAMD,yBAAyBZ,sCAQ5F,IAAM8E,EAAevE,KAAKM,MAAMG,YAAc,UAAY,OAE1D,OACI+D,EAAAd,EAAAe,cAAA,WAEID,EAAAd,EAAAe,cAACC,EAAD,CAAYC,aAAc3E,KAAKoB,mBAAoBE,uBAAwBtB,KAAKsB,uBAAwBC,2BAA4BvB,KAAKuB,2BAA4BX,YAAaZ,KAAKM,MAAMM,YAAaY,iBAAkBxB,KAAKwB,iBAAkBX,YAAab,KAAKM,MAAMO,YAAaC,YAAad,KAAKM,MAAMQ,YAAaW,mBAAoBzB,KAAKyB,mBAAoBC,mBAAoB1B,KAAK0B,mBAAoBL,YAAarB,KAAKqB,YAAahB,yBAA0BL,KAAKM,MAAMD,yBAA0BuB,gBAAiB5B,KAAK4B,kBAE3gB4C,EAAAd,EAAAe,cAACG,EAAD,CAAYjD,cAAe3B,KAAK2B,gBAEhC6C,EAAAd,EAAAe,cAACI,EAAD,CAAMtE,SAAUP,KAAKM,MAAMC,SAAUG,OAAQV,KAAKM,MAAMI,SAExD8D,EAAAd,EAAAe,cAAA,OAAKK,UAAU,qCAAqCC,GAAG,mBACnDP,EAAAd,EAAAe,cAAA,UAAQK,UAAU,eAAeC,GAAG,UAAUC,QAAShF,KAAKe,eAAgBkE,MAAO,CAAEC,QAASX,IAA9F,qBAGJC,EAAAd,EAAAe,cAAA,OAAKM,GAAG,iBACJP,EAAAd,EAAAe,cAAA,UAAQM,GAAG,QAAQD,UAAU,MAAME,QAAShF,KAAKkB,YAAa+D,MAAO,CAAEC,QAASlF,KAAKM,MAAME,aAAcgE,EAAAd,EAAAe,cAAEU,EAAA,EAAF,CAAkBC,KAAM1G,gBAlSnI2G,IAAMC,WAgTlBC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAA1F,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,IACVC,EAAA1F,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyF,GAAApF,KAAAH,QACKM,MAAQ,CACTmF,eAAe,EACfC,oBAAoB,GAExBF,EAAKG,gBAAkBH,EAAKG,gBAAgB3E,KAArBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAA0F,KANbA,iFAUVxF,KAAK+B,SACD,CACI0D,eAAgBzF,KAAKM,MAAMmF,cAC3BC,oBAAqB1F,KAAKM,MAAMoF,sDAMxC,OACIlB,EAAAd,EAAAe,cAAA,OAAKK,UAAU,6CAEXN,EAAAd,EAAAe,cAACmB,EAAD,CAAajB,aAAc3E,KAAK6F,MAAMlB,aAAce,mBAAoB1F,KAAKM,MAAMoF,mBAAoB9E,YAAaZ,KAAK6F,MAAMjF,YAAaY,iBAAkBxB,KAAK6F,MAAMrE,mBAEzKgD,EAAAd,EAAAe,cAACqB,EAAD,CAAkBnB,aAAc3E,KAAK6F,MAAMlB,aAAcc,cAAezF,KAAKM,MAAMmF,cAAeE,gBAAiB3F,KAAK2F,gBAAiB/E,YAAaZ,KAAKM,MAAMM,YAAaW,2BAA4BvB,KAAK6F,MAAMtE,2BAA4BD,uBAAwBtB,KAAK6F,MAAMvE,uBAAwBT,YAAab,KAAK6F,MAAMhF,YAAaC,YAAad,KAAK6F,MAAM/E,YAAaW,mBAAoBzB,KAAK6F,MAAMpE,mBAAoBC,mBAAoB1B,KAAK6F,MAAMnE,mBAAoBL,YAAarB,KAAK6F,MAAMxE,YAAahB,yBAA0BL,KAAK6F,MAAMxF,yBAA0BuB,gBAAiB5B,KAAK6F,MAAMjE,0BAzBnlByD,IAAMC,WAgCzBS,mLAEO,IAAAC,EAAAhG,KAECiG,EAAsBjG,KAAK6F,MAAMH,mBAAqB,UAAY,OAExE,OACIlB,EAAAd,EAAAe,cAAA,OAAKK,UAAU,oCAAoCC,GAAG,wBAClDP,EAAAd,EAAAe,cAAA,OAAKM,GAAG,6BACJP,EAAAd,EAAAe,cAAA,SAAOyB,KAAK,OAAOnB,GAAG,mBAAmBhB,MAAO/D,KAAK6F,MAAMjF,YAAauF,SAAUnG,KAAK6F,MAAMrE,mBAC7FgD,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,KAAGK,UAAU,kBAAb,+CAIRN,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,UAAQK,UAAU,MAAMC,GAAG,iBAAiBC,QAAS,kBAAMgB,EAAKH,MAAMlB,aAAaqB,EAAKH,MAAMjF,cAAcqE,MAAO,CAAEC,QAASe,IAC1HzB,EAAAd,EAAAe,cAAEU,EAAA,EAAF,CAAkBC,KAAM5G,gBAjBtB6G,IAAMC,WAyB1Bc,mLAIE,IAAIC,EAAQrG,KAAK6F,MAAMJ,cAAgB/G,IAAYD,IAEnD,OAEI+F,EAAAd,EAAAe,cAAA,OAAKK,UAAU,6BAEV9E,KAAK6F,MAAMJ,eAAiBjB,EAAAd,EAAAe,cAAC6B,EAAD,CAAW3B,aAAc3E,KAAK6F,MAAMlB,aAAc4B,iBAAkBvG,KAAK6F,MAAMU,iBAAkBjF,uBAAwBtB,KAAK6F,MAAMvE,uBAAwBC,2BAA4BvB,KAAK6F,MAAMtE,2BAA4BV,YAAab,KAAK6F,MAAMhF,YAAaC,YAAad,KAAK6F,MAAM/E,YAAaW,mBAAoBzB,KAAK6F,MAAMpE,mBAAoBC,mBAAoB1B,KAAK6F,MAAMnE,mBAAoBL,YAAarB,KAAK6F,MAAMxE,YAAahB,yBAA0BL,KAAK6F,MAAMxF,yBAA0BuB,gBAAiB5B,KAAK6F,MAAMjE,kBAE5iB4C,EAAAd,EAAAe,cAAA,OAAKK,UAAU,cAAcC,GAAG,mBAC5BP,EAAAd,EAAAe,cAAA,UAAQK,UAAU,WACdE,QAAShF,KAAK6F,MAAMF,iBADxB,mBAGoBnB,EAAAd,EAAAe,cAAEU,EAAA,EAAF,CAAkBC,KAAMiB,cAhBjChB,IAAMC,WAyB/BkB,mLACO,IAAAC,EAAAzG,KAKCX,EAAcP,EAAeU,IAC/B,SAACC,GAAD,OACI+E,EAAAd,EAAAe,cAAA,UAAQiC,IAAKjH,EAAMqF,UAAU,6BAA6BE,QAAS,kBAAMyB,EAAKZ,MAAMjE,gBAAgBnC,KAChG+E,EAAAd,EAAAe,cAAA,QACIK,UAAWrF,EAAKC,OAAOiH,QAAQ,IAAK,KAAK9D,cACzCoC,MAAO,CAAE2B,OAAQH,EAAKZ,MAAMxF,yBAAyBZ,GARlD,mBACG,0BAQRA,MAId,OACI+E,EAAAd,EAAAe,cAAA,OAAKM,GAAG,qBACJP,EAAAd,EAAAe,cAAA,OAAKM,GAAG,sBAAsBD,UAAU,+BACpCN,EAAAd,EAAAe,cAAA,OAAKM,GAAG,kCACJP,EAAAd,EAAAe,cAAA,MAAIK,UAAU,eAAd,eAAwCN,EAAAd,EAAAe,cAAA,QAAMK,UAAU,kBAAhB,wCAExCN,EAAAd,EAAAe,cAAA,KAAGK,UAAU,yBACRzF,IAITmF,EAAAd,EAAAe,cAAA,OAAKM,GAAG,2BACJP,EAAAd,EAAAe,cAAA,MAAIK,UAAU,eAAd,aAAsCN,EAAAd,EAAAe,cAAA,QAAMK,UAAU,kBAAhB,8BACtCN,EAAAd,EAAAe,cAAA,QAAMM,GAAG,kBACLP,EAAAd,EAAAe,cAAA,SAAOK,UAAU,eAAeoB,KAAK,SAASW,IAAI,MAAMC,IAAI,IAAI/C,MAAO/D,KAAK6F,MAAMhF,YAAasF,SAAUnG,KAAK6F,MAAMpE,qBADxH,IACqJ+C,EAAAd,EAAAe,cAAA,QAAMK,UAAU,aAAhB,MACjJN,EAAAd,EAAAe,cAAA,SAAOK,UAAU,eAAeoB,KAAK,SAASW,IAAI,MAAMC,IAAI,IAAI/C,MAAO/D,KAAK6F,MAAM/E,YAAaqF,SAAUnG,KAAK6F,MAAMnE,uBAI5H8C,EAAAd,EAAAe,cAAA,OAAKK,UAAU,eACXN,EAAAd,EAAAe,cAAA,UACIK,UAAU,oBACVC,GAAG,uBACHC,QACIhF,KAAK6F,MAAMtE,4BAEfiD,EAAAd,EAAAe,cAAEU,EAAA,EAAF,CAAkBC,KAAM5G,MAN5B,WAOAgG,EAAAd,EAAAe,cAAA,UAAQK,UAAU,oBAAoBC,GAAG,sBAAsBC,QAAShF,KAAK6F,MAAMxE,aAAnF,2BA3CAgE,IAAMC,WAoDxByB,mLAEE,OACIvC,EAAAd,EAAAe,cAAA,OAAKK,UAAU,qCAAqCC,GAAG,0BACnDP,EAAAd,EAAAe,cAAA,UAAQK,UAAU,eAAeC,GAAG,iBAAiBC,QAAShF,KAAK6F,MAAMlE,eAAzE,wBAJS0D,IAAMC,WAUzB0B,mLAGE,IAAMC,EAAWjH,KAAK6F,MAAMnF,OACtBwG,EAAMlH,KAAK6F,MAAMnF,OAAOoB,OAAS9B,KAAK6F,MAAMtF,SAAWP,KAAK6F,MAAMnF,OAAOoB,OAAS9B,KAAK6F,MAAMtF,SAUnG,OACIiE,EAAAd,EAAAe,cAAA,OAAKK,UAAU,4BAA4BC,GAAG,iBAThC,WAEd,IADA,IAAIoC,EAAM,GACD/D,EAAI,EAAGA,EAAI8D,EAAK9D,IACrB+D,EAAI7D,KAAKkB,EAAAd,EAAAe,cAAC2C,EAAD,CAAUV,IAAKtD,EAAGT,MAAOsE,EAAS7D,MAE/C,OAAO+D,EAKFE,WAhBEhC,IAAMC,WA2BnBgC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAzH,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IACVC,EAAAzH,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwH,GAAAnH,KAAAH,QACKM,MAAQ,CACTkH,WAAW,GAEfD,EAAKE,gBAAkBF,EAAKE,gBAAgBzG,KAArBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAyH,KACvBA,EAAKG,iBAAmBH,EAAKG,iBAAiB1G,KAAtBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAyH,KANdA,iFAUVvH,KAAK+B,SACD,CACIyF,WAAW,+CAMnBxH,KAAK+B,SACD,CACIyF,WAAW,qCAOnB,IAAMnI,EAAcW,KAAK6F,MAAMlD,MAAMtD,YAAYG,IAAI,SAACC,GAAD,OAAU+E,EAAAd,EAAAe,cAAA,QAAMiC,IAAKjH,EAAMqF,UAAWrF,EAAKC,OAAOiH,QAAQ,IAAK,KAAK9D,eAAgBpD,EAA1E,OAE/D,OACI+E,EAAAd,EAAAe,cAAA,OAAKK,UAAU,mBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,yCAEXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,uBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,cAAc6C,IAAK3H,KAAK6F,MAAMlD,MAAMiF,UAAWC,IAAI,aAGtErD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,0BACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,kBACXN,EAAAd,EAAAe,cAAA,QAAMK,UAAU,aAAa9E,KAAK6F,MAAMlD,MAAMC,KAAKkF,MAAM,KAAK,GAA9D,KACAtD,EAAAd,EAAAe,cAAA,QAAMK,UAAU,YAAY9E,KAAK6F,MAAMlD,MAAMC,KAAKkF,MAAM,KAAK,KAEjEtD,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,KAAGK,UAAU,eACRzF,KAKbmF,EAAAd,EAAAe,cAAA,OAAKK,UAAU,yBACXN,EAAAd,EAAAe,cAAA,UAAQK,UAAU,mBAAmBE,QAAShF,KAAKyH,iBAAiBjD,EAAAd,EAAAe,cAAA,QAAMK,UAAU,YAAhB,MAEpEN,EAAAd,EAAAe,cAACsD,EAAArE,EAAD,CACIsE,OAAQhI,KAAKM,MAAMkH,UACnBS,aAAa,eACbC,eAAgBlI,KAAK0H,iBACrB5C,UAAU,QACVqD,iBAAiB,gBACjBC,aAAa,GAEb5D,EAAAd,EAAAe,cAAA,UAAQK,UAAU,qBAAqBE,QAAShF,KAAK0H,kBAAkBlD,EAAAd,EAAAe,cAAEU,EAAA,EAAF,CAAkBC,KAAMzG,OAC/F6F,EAAAd,EAAAe,cAAC4D,EAAD,CAAQ1F,MAAO3C,KAAK6F,MAAMlD,mBA9D/B0C,IAAMC,WAyEvBgD,mLAEE,OACI9D,EAAAd,EAAAe,cAAA,OAAKK,UAAU,oBACXN,EAAAd,EAAAe,cAAC8D,EAAD,CAAS5F,MAAO3C,KAAK6F,MAAMlD,gBAJtB0C,IAAMC,WAUrBkD,mLAGE,IAAMnJ,EAAcW,KAAK6F,MAAMlD,MAAMtD,YAAYG,IAAI,SAACC,GAAD,OAAU+E,EAAAd,EAAAe,cAAA,QAAMiC,IAAKjH,EAAMqF,UAAWrF,EAAKC,OAAOiH,QAAQ,IAAK,KAAK9D,eAAgBpD,EAA1E,OAE/D,OACI+E,EAAAd,EAAAe,cAAA,OAAKK,UAAU,gBAEXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,sBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,2CAEXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,sBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,cAAc6C,IAAK3H,KAAK6F,MAAMlD,MAAMiF,UAAWC,IAAI,aAGtErD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,qCACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,oBAAoB9E,KAAK6F,MAAMlD,MAAMC,KAAKkF,MAAM,KAAK,IACpEtD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,mBAAmB9E,KAAK6F,MAAMlD,MAAMC,KAAKkF,MAAM,KAAK,IACnEtD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,OAAf,QAA2B9E,KAAK6F,MAAMlD,MAAMiB,KAC5CY,EAAAd,EAAAe,cAAA,OAAKK,UAAU,MAAf,cAAgC,OAAS9E,KAAK6F,MAAMlD,MAAMoC,IAAI0D,OAAO,OAMjFjE,EAAAd,EAAAe,cAAA,OAAKK,UAAU,4BACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,8BACXN,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,yBAEJD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,yBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,0BACXN,EAAAd,EAAAe,cAAA,sBAAczE,KAAK6F,MAAMlD,MAAM+F,OAAOC,QAAQ,GAA9C,KACAnE,EAAAd,EAAAe,cAAA,sBAAczE,KAAK6F,MAAMlD,MAAMiG,OAAOD,QAAQ,KAElDnE,EAAAd,EAAAe,cAAA,OAAKK,UAAU,0BACXN,EAAAd,EAAAe,cAAA,2BAAkBD,EAAAd,EAAAe,cAAA,QAAMK,UAAU,aAAaG,MAAO,CAAE4D,gBAAiB7I,KAAK6F,MAAMlD,MAAMmG,aAAe9I,KAAK6F,MAAMlD,MAAMmG,iBAM1ItE,EAAAd,EAAAe,cAAA,OAAKK,UAAU,6BACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,+BACXN,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,0BAEJD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,yBACXN,EAAAd,EAAAe,cAAA,KAAGK,UAAU,kCACRzF,MAMjBmF,EAAAd,EAAAe,cAACsE,EAAD,CAAaC,aAAchJ,KAAK6F,MAAMlD,MAAMsG,kBAvDtC5D,IAAMC,WAiEtB4D,mLAGE,IAAMC,EAAcnJ,KAAK6F,MAAMmD,aAAaxJ,IACxC,SAAC4J,GAAD,OAAY5E,EAAAd,EAAAe,cAAC4E,EAAD,CAAY3C,IAAK0C,EAAQA,OAAQA,MAGjD,OACI5E,EAAAd,EAAAe,cAAA,OAAKK,UAAU,yBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,2BACXN,EAAAd,EAAAe,cAAA,MAAIM,GAAG,aAAP,WACCoE,WAXK9D,IAAMC,WAqB1BgE,mLACO,IAAAC,EAAAvJ,KAEC2C,EAAQhD,EAAc6J,KAAK,SAAA7G,GAAK,OAAIA,EAAMC,OAAS2G,EAAK1D,MAAMuD,SAC9D/J,EAAcsD,EAAMtD,YAAYG,IAAI,SAACC,GAAD,OAAU+E,EAAAd,EAAAe,cAAA,QAAMiC,IAAKjH,EAAMqF,UAAWrF,EAAKC,OAAOiH,QAAQ,IAAK,KAAK9D,eAAgBpD,EAA1E,OAEpD,OACI+E,EAAAd,EAAAe,cAAA,OAAKK,UAAU,mBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,4BACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,uBACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,cAAc6C,IAAKhF,EAAMiF,UAAWC,IAAI,aAE3DrD,EAAAd,EAAAe,cAAA,OAAKK,UAAU,0BACXN,EAAAd,EAAAe,cAAA,OAAKK,UAAU,kBACXN,EAAAd,EAAAe,cAAA,QAAMK,UAAU,aAAa9E,KAAK6F,MAAMuD,OAAOtB,MAAM,KAAK,GAA1D,KACAtD,EAAAd,EAAAe,cAAA,QAAMK,UAAU,YAAY9E,KAAK6F,MAAMuD,OAAOtB,MAAM,KAAK,KAE7DtD,EAAAd,EAAAe,cAAA,WACID,EAAAd,EAAAe,cAAA,KAAGK,UAAU,eACRzF,cAnBRgG,IAAMC,WA6ChB1F,QCjsBK6J,QACW,cAA7BzH,OAAO0H,SAASC,UAEe,UAA7B3H,OAAO0H,SAASC,UAEhB3H,OAAO0H,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtF,EAAAd,EAAAe,cAACsF,EAAD,MAAS3H,SAAS4H,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33aaac6d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactModal from 'react-modal';\r\nimport './index.css';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faCaretDown, faCaretUp, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nlibrary.add(faSearch, faCaretDown, faCaretUp, faTimes)\r\n\r\nlet json = require('./data.json');\r\nlet professionsArr = Array.from(listProfessions(json));\r\nprofessionsArr = professionsArr.map((prof) => prof.trim());\r\nconst initialGnomes = json['Brastlewark'];\r\n\r\n\r\n/*\r\n* Stateful component App contains all the components of the UI\r\n*\r\n* States:\r\n* gnomeNum {int} number of gnomes currently on display in the listing\r\n* upBtnStyle {String} either 'none' or 'initial', defines whether the button to return to the top is displayed\r\n* showMoreBtn {boolean} defines whether 'load more gnomes' button is displayed or not\r\n* gnomes {Array} each element is an object 'gnome' that holds all properties of a single gnome\r\n* professionsFilter {Set} list of all distinct professions among all gnomes\r\n* searchInput {String} value of the name search field\r\n* minAgeInput / maxAgeInput {int} min / max values of the age reange search input field\r\n* professionsBorderToggler {String: boolean} where String is the name of a profession. Determines whether\r\n*   a profession button is selected or not in the advanced search\r\n*/\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        const professionsFilter = new Set();\r\n        const professionsBorderToggler = {};\r\n        professionsArr.forEach((prof) => professionsBorderToggler[prof] = false);\r\n        this.state = {\r\n            gnomeNum: 10,\r\n            upBtnStyle: 'none',\r\n            showMoreBtn: true,\r\n            gnomes: [...initialGnomes],\r\n            professionsFilter: professionsFilter,\r\n            searchInput: '',\r\n            minAgeInput: 0,\r\n            maxAgeInput: 400,\r\n            professionsBorderToggler: professionsBorderToggler,\r\n        };\r\n\r\n        this.showMoreGnomes = this.showMoreGnomes.bind(this);\r\n        this.scrollToTop = this.scrollToTop.bind(this);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n        this.filterGnomesByName = this.filterGnomesByName.bind(this);\r\n        this.resetGnomes = this.resetGnomes.bind(this);\r\n        this.toggleProfessionFilter = this.toggleProfessionFilter.bind(this);\r\n        this.filterGnomesAdvancedSearch = this.filterGnomesAdvancedSearch.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleMinAgeChange = this.handleMinAgeChange.bind(this);\r\n        this.handleMaxAgeChange = this.handleMaxAgeChange.bind(this);\r\n        this.shuffleGnomes = this.shuffleGnomes.bind(this);\r\n        this.handleProfClick = this.handleProfClick.bind(this);\r\n        this.toggleMoreBtn = this.toggleMoreBtn.bind(this);\r\n\r\n    }\r\n\r\n    /*\r\n    * toggles the state of the 'load more gnomes' button to be displayed / hidden\r\n    */\r\n    toggleMoreBtn() {\r\n\r\n        if (+this.state.gnomeNum >= this.state.gnomes.length) {\r\n            this.setState({\r\n                showMoreBtn: !this.state.showMoreBtn,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.handleScroll);\r\n    }\r\n\r\n    handleScroll() {\r\n\r\n        if (window.pageYOffset > 300) {\r\n            this.setState({\r\n                upBtnStyle: 'initial',\r\n            });\r\n        } else {\r\n            this.setState({\r\n                upBtnStyle: 'none',\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n    * When the \"load more gnomes\" button is clicked, this method is called\r\n    */\r\n    showMoreGnomes() {\r\n        this.setState(\r\n            {\r\n                gnomeNum: this.state.gnomeNum + 20,\r\n            }, this.toggleMoreBtn()\r\n        );\r\n    }\r\n\r\n    scrollToTop() {\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera \r\n    }\r\n\r\n    /*\r\n    * Called when the search button on the basic search is clicked\r\n    *\r\n    * @param str {String} current value of the text input field next to the search button\r\n    */\r\n    filterGnomesByName(str) {\r\n        let filteredGnomes = [];\r\n\r\n        if (str === '') {\r\n            filteredGnomes = initialGnomes\r\n        } else {\r\n            filteredGnomes = initialGnomes.filter((gnome) => gnome.name.toLowerCase().includes(str.trim().toLowerCase()));\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                gnomes: filteredGnomes,\r\n                gnomeNum: 10,\r\n            }, this.toggleMoreBtn()\r\n        );\r\n    }\r\n\r\n    /*\r\n    * resets the list of gnomes to its initial state, called when clicking the \"reset filters\" button\r\n    * it also resets the order of gnomes in the list to its initial order\r\n    */\r\n    resetGnomes() {\r\n        this.setState(\r\n            {\r\n                gnomes: [...initialGnomes],\r\n                gnomeNum: 10,\r\n                searchInput: '',\r\n                professionsFilter: new Set(),\r\n                minAgeInput: 0,\r\n                maxAgeInput: 400,\r\n                professionsBorderToggler: {},\r\n            }, this.toggleMoreBtn()\r\n        );\r\n    }\r\n\r\n    /*\r\n    * adds / deletes given profession from Set professionsFilter\r\n    * called when user clicks on profession buttons in advanced search\r\n    * professionsFilter is used to filter the gnome list\r\n    *\r\n    * @param prof {String} profession name\r\n    */\r\n    toggleProfessionFilter(prof) {\r\n        if (this.state.professionsFilter.has(prof)) {\r\n            this.state.professionsFilter.delete(prof);\r\n        } else {\r\n            this.state.professionsFilter.add(prof);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Called when clicking 'search' button of advanced search\r\n    * filters gnomes by:\r\n    *   1. Name in the input field\r\n    *   2. Selected professions (any gnomes having at least one of the selected profession will be displayed)\r\n    *   3. Age range: any gnomes inside the age range will be selected\r\n    */\r\n    filterGnomesAdvancedSearch() {\r\n\r\n        // Filter gnomes by name\r\n        let str = this.state.searchInput;\r\n        let filteredGnomes = [];\r\n\r\n        if (str === '') {\r\n            filteredGnomes = initialGnomes\r\n        } else {\r\n            filteredGnomes = initialGnomes.filter((gnome) => gnome.name.toLowerCase().includes(str.trim().toLowerCase()));\r\n        }\r\n\r\n        // Filter gnomes by profession\r\n        let filterProfessions = Array.from(this.state.professionsFilter);\r\n        let filteredGnomesByProfession = [];\r\n\r\n        if (this.state.professionsFilter.size > 0) {\r\n\r\n            for (let i = 0; i < filteredGnomes.length; i++) {\r\n\r\n                if (filteredGnomes[i].professions.length + filterProfessions.length > new Set(filteredGnomes[i].professions.concat(filterProfessions)).size) {\r\n\r\n                    filteredGnomesByProfession.push(filteredGnomes[i]);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            filteredGnomesByProfession = filteredGnomes;\r\n        }\r\n\r\n        //Filter gnomes by age\r\n        let filteredGnomesByAge = [];\r\n        let minAge = +this.state.minAgeInput || 0;\r\n        let maxAge = +this.state.maxAgeInput || 400;\r\n        let orderedAgeRange = [+minAge, +maxAge].sort((a, b) => a - b);\r\n\r\n        for (let i = 0; i < filteredGnomesByProfession.length; i++) {\r\n\r\n            if (orderedAgeRange[0] > filteredGnomesByProfession[i].age || orderedAgeRange[1] < filteredGnomesByProfession[i].age) {\r\n                continue;\r\n            }\r\n\r\n            filteredGnomesByAge.push(filteredGnomesByProfession[i]);\r\n\r\n        }\r\n\r\n        let advFilteredGnomes = filteredGnomesByAge;\r\n\r\n        this.setState(\r\n            {\r\n                gnomes: advFilteredGnomes,\r\n                gnomeNum: 10,\r\n            }, this.toggleMoreBtn()\r\n        );\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState(\r\n            {\r\n                searchInput: e.target.value,\r\n            }\r\n        );\r\n    }\r\n\r\n    handleMinAgeChange(e) {\r\n        this.setState(\r\n            // (state) => {\r\n            //     return state.ageInput[0] = e.target.value;\r\n            // }\r\n            {\r\n                minAgeInput: e.target.value,\r\n            }\r\n        );\r\n    }\r\n\r\n    handleMaxAgeChange(e) {\r\n        this.setState(\r\n            {\r\n                maxAgeInput: e.target.value,\r\n            }\r\n        );\r\n    }\r\n\r\n    /*\r\n    * Called when clicking the 'surprise me!' button.\r\n    * Gnome order is randomized using a Fisher-Yates algorithm: https://bost.ocks.org/mike/shuffle/\r\n    */\r\n    shuffleGnomes() {\r\n\r\n        let shuffledGnomes = [...initialGnomes];\r\n        let m = shuffledGnomes.length;\r\n        let i;\r\n\r\n        while (m) {\r\n\r\n            i = Math.floor(Math.random() * m--);\r\n\r\n            ([shuffledGnomes[m], shuffledGnomes[i]] = [shuffledGnomes[i], shuffledGnomes[m]]);\r\n\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                gnomes: shuffledGnomes,\r\n                gnomeNum: 10,\r\n            }, this.toggleMoreBtn()\r\n        );\r\n\r\n    }\r\n\r\n    /*\r\n    * Called when user clicks on professions buttons in advanced search\r\n    */\r\n    handleProfClick(prof) {\r\n        this.toggleProfessionFilter(prof);\r\n        this.setState(\r\n            (state) => {\r\n                return (state.professionsBorderToggler[prof] = !this.state.professionsBorderToggler[prof])\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const moreBtnStyle = this.state.showMoreBtn ? 'initial' : 'none';\r\n\r\n        return (\r\n            <div>\r\n\r\n                <SearchArea filterGnomes={this.filterGnomesByName} toggleProfessionFilter={this.toggleProfessionFilter} filterGnomesAdvancedSearch={this.filterGnomesAdvancedSearch} searchInput={this.state.searchInput} handleNameChange={this.handleNameChange} minAgeInput={this.state.minAgeInput} maxAgeInput={this.state.maxAgeInput} handleMinAgeChange={this.handleMinAgeChange} handleMaxAgeChange={this.handleMaxAgeChange} resetGnomes={this.resetGnomes} professionsBorderToggler={this.state.professionsBorderToggler} handleProfClick={this.handleProfClick} />\r\n\r\n                <SupriseBtn shuffleGnomes={this.shuffleGnomes} />\r\n\r\n                <List gnomeNum={this.state.gnomeNum} gnomes={this.state.gnomes} />\r\n\r\n                <div className='d-flex justify-center align-center' id='moreBtn-wrapper'>\r\n                    <button className='btn btn-wide' id='moreBtn' onClick={this.showMoreGnomes} style={{ display: moreBtnStyle }}>Load more Gnomes</button>\r\n                </div>\r\n\r\n                <div id='upBtn-wrapper'>\r\n                    <button id='upBtn' className='btn' onClick={this.scrollToTop} style={{ display: this.state.upBtnStyle }}>< FontAwesomeIcon icon={faCaretUp} /></button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n* states:\r\n* showAdvSearch {boolean} determines whether advanced search is displayed or not, and direction where\r\n*   caret next to 'advanced search' text is pointing\r\n* showBasicSearchBtn {boolean} determines whether search button of basic search is displayed or not\r\n*/\r\nclass SearchArea extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            showAdvSearch: false,\r\n            showBasicSearchBtn: true,\r\n        };\r\n        this.toggleAdvSearch = this.toggleAdvSearch.bind(this);\r\n    }\r\n\r\n    toggleAdvSearch() {\r\n        this.setState(\r\n            {\r\n                showAdvSearch: !this.state.showAdvSearch,\r\n                showBasicSearchBtn: !this.state.showBasicSearchBtn,\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='searchContainer d-flex d-col align-center'>\r\n\r\n                <BasicSearch filterGnomes={this.props.filterGnomes} showBasicSearchBtn={this.state.showBasicSearchBtn} searchInput={this.props.searchInput} handleNameChange={this.props.handleNameChange} />\r\n\r\n                <AdvSearchToggler filterGnomes={this.props.filterGnomes} showAdvSearch={this.state.showAdvSearch} toggleAdvSearch={this.toggleAdvSearch} searchInput={this.state.searchInput} filterGnomesAdvancedSearch={this.props.filterGnomesAdvancedSearch} toggleProfessionFilter={this.props.toggleProfessionFilter} minAgeInput={this.props.minAgeInput} maxAgeInput={this.props.maxAgeInput} handleMinAgeChange={this.props.handleMinAgeChange} handleMaxAgeChange={this.props.handleMaxAgeChange} resetGnomes={this.props.resetGnomes} professionsBorderToggler={this.props.professionsBorderToggler} handleProfClick={this.props.handleProfClick} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass BasicSearch extends React.Component {\r\n\r\n    render() {\r\n\r\n        const basicSearchBtnStyle = this.props.showBasicSearchBtn ? 'initial' : 'none';\r\n\r\n        return (\r\n            <div className='d-flex align-start justify-center' id='basicSearchContainer'>\r\n                <div id='basicSearchInputContainer'>\r\n                    <input type='text' id='basicSearchInput' value={this.props.searchInput} onChange={this.props.handleNameChange}></input>\r\n                    <div>\r\n                        <p className='basicSearchCue'>Try searching a Gnome e.g. 'Bitterbuster'</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <button className='btn' id='basicSearchBtn' onClick={() => this.props.filterGnomes(this.props.searchInput)} style={{ display: basicSearchBtnStyle }}>\r\n                        < FontAwesomeIcon icon={faSearch} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass AdvSearchToggler extends React.Component {\r\n\r\n    render() {\r\n\r\n        let caret = this.props.showAdvSearch ? faCaretUp : faCaretDown;\r\n\r\n        return (\r\n\r\n            <div className='d-flex d-col align-center'>\r\n\r\n                {this.props.showAdvSearch && <AdvSearch filterGnomes={this.props.filterGnomes} basicSearchInput={this.props.basicSearchInput} toggleProfessionFilter={this.props.toggleProfessionFilter} filterGnomesAdvancedSearch={this.props.filterGnomesAdvancedSearch} minAgeInput={this.props.minAgeInput} maxAgeInput={this.props.maxAgeInput} handleMinAgeChange={this.props.handleMinAgeChange} handleMaxAgeChange={this.props.handleMaxAgeChange} resetGnomes={this.props.resetGnomes} professionsBorderToggler={this.props.professionsBorderToggler} handleProfClick={this.props.handleProfClick} />}\r\n\r\n                <div className='text-center' id='toggleSearchBtn'>\r\n                    <button className='btn-none'\r\n                        onClick={this.props.toggleAdvSearch}\r\n                    >\r\n                        Advanced search < FontAwesomeIcon icon={caret} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nclass AdvSearch extends React.Component {\r\n    render() {\r\n\r\n        const withBorder = '2px solid yellow';\r\n        const withoutBorder = '2px solid transparent';\r\n\r\n        const professions = professionsArr.map(\r\n            (prof) =>\r\n                <button key={prof} className='btn btn-none professionBtn' onClick={() => this.props.handleProfClick(prof)}>\r\n                    <span\r\n                        className={prof.trim().replace(' ', '-').toLowerCase()}\r\n                        style={{ border: this.props.professionsBorderToggler[prof] ? withBorder : withoutBorder }}\r\n                    >{prof}\r\n                    </span>\r\n                </button>);\r\n\r\n        return (\r\n            <div id='advSearch-wrapper'>\r\n                <div id='advSearch-container' className='d-flex d-col justify-center'>\r\n                    <div id='advSearc-professions-container'>\r\n                        <h1 className='advSearch-h'>Professions <span className='basicSearchCue'>Select any number, follows OR logic</span></h1>\r\n\r\n                        <p className='advSearch-professions'>\r\n                            {professions}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div id='advSearch-age-container'>\r\n                        <h1 className='advSearch-h'>Age range <span className='basicSearchCue'>Valid range from 0 to 400</span></h1>\r\n                        <span id='age-input-span'>\r\n                            <input className='search-input' type='number' max='400' min='0' value={this.props.minAgeInput} onChange={this.props.handleMinAgeChange}></input> <span className='separator'>- </span>\r\n                            <input className='search-input' type='number' max='400' min='0' value={this.props.maxAgeInput} onChange={this.props.handleMaxAgeChange}></input>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className='text-center'>\r\n                        <button\r\n                            className='btn btn-advSearch'\r\n                            id='btn-advSearch-search'\r\n                            onClick={\r\n                                this.props.filterGnomesAdvancedSearch}\r\n                        >\r\n                            < FontAwesomeIcon icon={faSearch} /> Search</button>\r\n                        <button className='btn btn-advSearch' id='btn-advSearch-reset' onClick={this.props.resetGnomes}>Reset filters</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SupriseBtn extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='d-flex justify-center align-center' id='surpriseMe-btn-wrapper'>\r\n                <button className='btn btn-wide' id='surpirseMe-btn' onClick={this.props.shuffleGnomes}>Surprise me!</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass List extends React.Component {\r\n    render() {\r\n\r\n        const gnomeArr = this.props.gnomes;\r\n        const num = this.props.gnomes.length < this.props.gnomeNum ? this.props.gnomes.length : this.props.gnomeNum;\r\n\r\n        const gnomeList = function () {\r\n            let arr = [];\r\n            for (let i = 0; i < num; i++) {\r\n                arr.push(<ListItem key={i} gnome={gnomeArr[i]} />);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        return (\r\n            <div className='d-flex d-col align-center' id='listContainer'>\r\n                {gnomeList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n* states:\r\n* showModal {boolean} determines whether modal (detail) window is displayed or not\r\n* \r\n*/\r\nclass ListItem extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            showModal: false,\r\n        }\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n\r\n    handleOpenModal() {\r\n        this.setState(\r\n            {\r\n                showModal: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    handleCloseModal() {\r\n        this.setState(\r\n            {\r\n                showModal: false,\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        const professions = this.props.gnome.professions.map((prof) => <span key={prof} className={prof.trim().replace(' ', '-').toLowerCase()}>{prof} </span>);\r\n\r\n        return (\r\n            <div className='listItemWrapper'>\r\n                <div className='listItemContainer d-flex justify-left'>\r\n\r\n                    <div className='profile-img-wrapper'>\r\n                        <img className='profile-img' src={this.props.gnome.thumbnail} alt='profile' />\r\n                    </div>\r\n\r\n                    <div className='profile-info-container'>\r\n                        <div className='name-container'>\r\n                            <span className='firstName'>{this.props.gnome.name.split(' ')[0]} </span>\r\n                            <span className='lastName'>{this.props.gnome.name.split(' ')[1]}</span>\r\n                        </div>\r\n                        <div>\r\n                            <p className='professions'>\r\n                                {professions}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='seeDetailBtnContainer'>\r\n                        <button className='btn seeDetailBtn' onClick={this.handleOpenModal}><span className='btn-text'>+</span></button>\r\n\r\n                        <ReactModal\r\n                            isOpen={this.state.showModal}\r\n                            contentLabel='Gnome detail'\r\n                            onRequestClose={this.handleCloseModal}\r\n                            className='modal'\r\n                            overlayClassName='modal-overlay'\r\n                            ariaHideApp={false}\r\n                        >\r\n                            <button className='closeDetailBtn btn' onClick={this.handleCloseModal}>< FontAwesomeIcon icon={faTimes} /></button>\r\n                            <Detail gnome={this.props.gnome} />\r\n                        </ReactModal>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Detail extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='detail-container'>\r\n                <Profile gnome={this.props.gnome} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Profile extends React.Component {\r\n    render() {\r\n\r\n        const professions = this.props.gnome.professions.map((prof) => <span key={prof} className={prof.trim().replace(' ', '-').toLowerCase()}>{prof} </span>);\r\n\r\n        return (\r\n            <div className='d-flex d-col'>\r\n\r\n                <div className='gnome-data-wrapper'>\r\n                    <div className='gnome-data-container d-flex align-start'>\r\n\r\n                        <div className='detail-img-wrapper'>\r\n                            <img className='profile-img' src={this.props.gnome.thumbnail} alt='profile' />\r\n                        </div>\r\n\r\n                        <div className='gnome-name-container d-flex d-col'>\r\n                            <div className='detail-firstName'>{this.props.gnome.name.split(' ')[0]}</div>\r\n                            <div className='detail-lastName'>{this.props.gnome.name.split(' ')[1]}</div>\r\n                            <div className='age'>Age: {this.props.gnome.age}</div>\r\n                            <div className='id'>Gnome ID: {('0000' + this.props.gnome.id).slice(-4)}</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='gnome-appearance-wrapper'>\r\n                    <div className='gnome-appearance-container'>\r\n                        <div>\r\n                            <h1>Appearance</h1>\r\n                        </div>\r\n                        <div className='d-flex justify-evenly'>\r\n                            <div className='appearance-content-row'>\r\n                                <div>Weight: {this.props.gnome.weight.toFixed(2)} </div>\r\n                                <div>Height: {this.props.gnome.height.toFixed(2)}</div>\r\n                            </div>\r\n                            <div className='appearance-content-row'>\r\n                                <span>Hair color: <span className='hair-color' style={{ backgroundColor: this.props.gnome.hair_color }}>{this.props.gnome.hair_color}</span></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='gnome-professions-wrapper'>\r\n                    <div className='gnome-professions-container'>\r\n                        <div>\r\n                            <h1>Professions</h1>\r\n                        </div>\r\n                        <div className='d-flex justify-evenly'>\r\n                            <p className='professions detail-professions'>\r\n                                {professions}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <FriendsList gnomeFriends={this.props.gnome.friends} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n* @props gnome.friends {[str]} array holding a list of gnome's friend's names\r\n*/\r\nclass FriendsList extends React.Component {\r\n    render() {\r\n\r\n        const friendItems = this.props.gnomeFriends.map(\r\n            (friend) => <FriendItem key={friend} friend={friend} />\r\n        );\r\n\r\n        return (\r\n            <div className='gnome-friends-wrapper'>\r\n                <div className='gnome-friends-container'>\r\n                    <h1 id='h-friends'>Friends</h1>\r\n                    {friendItems}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @props {str} gnome.friend[index] name of a gnome's friend\r\n */\r\nclass FriendItem extends React.Component {\r\n    render() {\r\n\r\n        const gnome = initialGnomes.find(gnome => gnome.name === this.props.friend);\r\n        const professions = gnome.professions.map((prof) => <span key={prof} className={prof.trim().replace(' ', '-').toLowerCase()}>{prof} </span>);\r\n\r\n        return (\r\n            <div className='listItemWrapper'>\r\n                <div className='listItemContainer d-flex'>\r\n                    <div className='profile-img-wrapper'>\r\n                        <img className='profile-img' src={gnome.thumbnail} alt='profile' />\r\n                    </div>\r\n                    <div className='profile-info-container'>\r\n                        <div className='name-container'>\r\n                            <span className='firstName'>{this.props.friend.split(' ')[0]} </span>\r\n                            <span className='lastName'>{this.props.friend.split(' ')[1]}</span>\r\n                        </div>\r\n                        <div>\r\n                            <p className='professions'>\r\n                                {professions}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n* listProfessions creates a set whose values are any possible professions the gnomes have\r\n*\r\n* @param json {obj} where json['brastlewark'][index].professions is an array of professions (Strings) for any given gnome\r\n* @return Set with distinct available professions\r\n*/\r\nfunction listProfessions(json) {\r\n\r\n    let professionsSet = new Set();\r\n\r\n    json['Brastlewark'].forEach(e => { return e.professions.forEach(p => professionsSet.add(p)) });\r\n\r\n    return professionsSet;\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}